s0 <= A + 4*N*i

move $a0, $t1
move $a1, $zero
jal fetchaddress

sll $s0, $t5, 2
addu $s0, $s0, $v0

sll

initiering:
  i = k + 1;
  x = &A[k][0]    // start rad k
for-loop1:
  beq i == N done
  y     = &A[i][0]    // start rad i
  z     = &A[i][k]
  stop  = &A[i+1][0]  // slutadress för iterering
  initiering:
    j = k + 1;
    j = &A[i][j];
    å = &A[k][j];
  for-loop2:
    beq j == stop done2
    *j = *j - (*z * *å);
    j = j + 4;
    å = å + 4;
    jump for-loop2
  done2:
    *z  = 0.0;
    i   = i + 1;
    jump for-loop1
done1:


# x = s0
# y = s1
# stop = s3
# å = s4

init1:
    addi  $t0, $t2, 1     # i = k + 1
    
    # hämta s0 = &A[k][0]
    move  $a0, $t2
    move  $a1, $zero
    jal   fetchaddress
    move  $s0, $v0
    
forloop1:
    beq   $t0, $t5, done1  # i == N ?
    
    # s1 = &A[i][0]
    move  $a0, $t0
    move  $a1, $zero
    jal   fetchaddress
    move  $s1, $v0
    
    # s2 = &A[i][k]
    sll   $s2, $t2, 2     # s2 = k*4
    add   $s2, $s1, $s2   # s2 = &A[i][0] + k*4
    
    # s3 = &A[i][0] + N * 4 <= slutadress
    sll   $s3, $t5, 2
    add   $s3, $s1, $s3
    
    # t1 = &A[i][k] + 4
    addiu $t1, $t2, 4
    
    # s4 = &A[k][0] + 4*(k + 1)
    addiu $s4, $t2, 1
    sll   $s4, $s4, 2
    addu  $s4, $s0, $s4

forloop2:
    beq   $t1, $s3, done2
    lwc1  $f2, ($s4)     # f2 <= *å
    lwc1  $f3, ($s2)      # f3 <= *z
    lwc1  $f4, ($t1)      # f4 <= *j
    mul.s $f2, $f2, $f3 # f2 *z * *å
    sub.s $f2, $f4, $f2 # j <= j - f2
    swc1  $f2, ($t1)
 
    addiu $t2, $t1, 4
    addiu $s4, $s4, 4
    j forloop2
 
done2:
    swc1 $f0, ($s2)
    addiu $t0, $t0, 1
    j forloop1
done1:
    
    
    
    
  
    
    
  
  
  